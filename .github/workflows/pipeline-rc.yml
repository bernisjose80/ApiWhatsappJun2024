name: Deploy RC for BotWhatsapp

on:
  push:
    branches:
      - main
    tags:
      - "rc-*.*"

  workflow_dispatch: #To RUN this WORKFLOW Manually from 

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2         
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Pre-Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: true
      - 
        name: Login to gitlab
        if: github.event_name = 'push_request'
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_USER }}
          password: ${{ secrets.GITLAB_TOKEN }} 
      - 
        name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./Docker/DockerFile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          # (GITLAB)
          tags: |  
            registry.gitlab.com/am-software-web/botwhatsapp:latest
            registry.gitlab.com/am-software-web/botwhatsapp:${{ steps.get_version.outputs.VERSION }}
          # (GITHUB)
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - 
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}